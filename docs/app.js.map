{"version":3,"sources":["/src/index.ts","/src/module.ts","/src/Root/index.ts","/src/utils.ts","/src/Root/constants.ts","/src/Root/slides/index.ts","/src/Root/slides/0.ts","/src/Root/slides/1.ts","/src/Root/slides/2.ts","/src/Root/slides/3.ts","/src/Root/slides/4.ts","/src/Root/slides/5.ts","/src/Root/slides/6.ts","/src/Root/slides/7.ts","/src/Root/slides/8.ts","/src/Root/slides/9.ts","/src/Root/scripts.ts","/src/wasm-util/ast.ts","/src/wasm-util/utf8.ts","/src/wasm-util/emit.ts","/src/Root/slides/10.ts","/src/Root/slides/11.ts","/src/Root/slides/12.ts","/src/hmr.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import './assets/icons-bundle.css'\nimport './styles.css'\nimport { runModule } from './module'\nimport * as root from './Root'\nimport './hmr'\n\nnavigator.serviceWorker.register('service-worker.js')\n\nlet DEV = !process.env.isProduction\n\n;(async () => {\n  let app = await runModule(root, DEV)\n  ;(window as any).app = app\n  app.moduleAPI.dispatch(['Root', 'init'])\n})()\n","import {\n  run,\n  Component,\n  // DEV\n  logFns,\n  RunModule,\n} from 'fractal-core'\nimport { viewHandler } from 'fractal-core/interfaces/view'\nimport { styleHandler } from 'fractal-core/groups/style'\n\nexport const runModule: RunModule = (root: Component<any>, DEV: boolean, viewCb?) => run({\n  root,\n  groups: {\n    style: styleHandler('', DEV),\n  },\n  interfaces: {\n    view: viewHandler('#app', viewCb),\n  },\n...DEV ? logFns : {},\n})\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n  assoc,\n  Components,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { waitMS, launchIntoFullscreen, exitFullscreen, isDecendantOfId } from '../utils'\nimport { palette } from './constants'\n\nimport slides from './slides'\n\nconst numSlides = Object.keys(slides).length\n\nexport const name = 'Root'\n\nexport const components: Components = slides\n\nexport const state = {\n  step: <'visible' | 'hiddenLeft' | 'hiddenRight'> 'visible',\n  slide: 0,\n  animated: false,\n  fullscreen: false,\n}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ({ toAct, stateOf, toIt, toChild }) => ({\n  init: async () => {\n    let hash = window.location.hash || '#0'\n    if (hash) {\n      let slide = parseInt(hash.substr(1))\n      toAct('SetSlide', slide)\n      toChild(slide + '', 'init')\n    }\n    window.addEventListener('hashchange', () => {\n      let slide = parseInt((window.location.hash || '#0').substr(1))\n      toAct('SetSlide', slide)\n      setTimeout(() => toChild(slide + '', 'init'), 500)\n    })\n    window.addEventListener('keyup', ev => {\n      if (isDecendantOfId(ev.target, 'codeEditor') || isDecendantOfId(ev.target, 'testEditor')) {\n        return\n      }\n      if (ev.keyCode === 39) {\n        toIt('slide', 'NextSlide')\n      } else if (ev.keyCode === 37) {\n        toIt('slide', 'PrevSlide')\n      }\n    })\n  },\n  slide: async (action: string) => {\n    await toAct('SetAnimated', true)\n    await toAct('SetStep', action === 'NextSlide' ? 'hiddenLeft' : 'hiddenRight')\n    await waitMS(300)\n    let initialSlide = stateOf().slide\n    await toAct(action)\n    let slide = stateOf().slide\n    if (slide === initialSlide) {\n      await toAct('SetStep', 'visible')\n      return\n    }\n    await toIt('setHash', slide)\n    await toAct('SetAnimated', false)\n    await toAct('SetStep', action === 'NextSlide' ? 'hiddenRight' : 'hiddenLeft')\n    await waitMS(100)\n    await toAct('SetAnimated', true)\n    await toChild(slide + '', 'init')\n    await toAct('SetStep', 'visible')\n  },\n  setHash: (hash: string) => {\n    history.pushState(null, null, document.location.pathname + '#' + hash)\n  },\n  toggleFullScreen: async () => {\n    if (stateOf().fullscreen) {\n      exitFullscreen()\n    } else {\n      launchIntoFullscreen(document.documentElement)\n    }\n    await toAct('ToggleFullscreen')\n  },\n})\n\nexport const actions: Actions<S> = {\n  ToggleFullscreen: () => s => {\n    s.fullscreen = !s.fullscreen\n    return s\n  },\n  SetStep: assoc('step'),\n  SetSlide: assoc('slide'),\n  SetAnimated: assoc('animated'),\n  NextSlide: () => s => {\n    if (s.slide < numSlides - 1) {\n      s.slide++\n    }\n    return s\n  },\n  PrevSlide: () => s => {\n    if (s.slide > 0) {\n      s.slide--\n    }\n    return s\n  },\n}\n\nconst view: View<S> = ({ ctx, ev, vw, act }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: {\n      [style.slide]: true,\n      [style.slideVisible]: s.step === 'visible',\n      [style.slideAnimated]: s.animated,\n      [style.slideHiddenLeft]: s.step === 'hiddenLeft',\n      [style.slideHiddenRight]: s.step === 'hiddenRight',\n    }}, [\n      h('div', {class: { [style.buttonContainer]: true }}, [\n        h('button', {\n          class: { [style.button]: true, [style.buttonDisabled]: s.slide === 0 },\n          on: { click: ev('slide', 'PrevSlide') },\n          attrs: s.slide === 0 ? { disabled: 'disabled' } : {},\n        }, '<'),\n        h('button', {\n          class: { [style.button]: true },\n          on: { click: ev('toggleFullScreen') },\n        }, s.fullscreen ? 'X' : 'O'),\n        h('button', {\n          class: { [style.button]: true, [style.buttonDisabled]: s.slide === numSlides - 1 },\n          on: { click: ev('slide', 'NextSlide') },\n          attrs: s.slide === numSlides - 1 ? { disabled: 'disabled' } : {},\n        }, '>'),\n      ]),\n      vw(s.slide + ''),\n    ]),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.4)',\n    fontFamily: '\"Open Sans\", sans-serif',\n    color: palette.textPrimary,\n    overflow: 'hidden',\n  },\n  slide: {\n    width: '800px',\n    height: '92%',\n    borderRadius: '40px',\n    backgroundColor: 'white',\n    opacity: 0,\n    boxShadow: '1px 1px 2px 1px #656565',\n  },\n  slideVisible: {\n    opacity: 1,\n    transform: 'translateX(0px)',\n  },\n  slideAnimated: {\n    transition: 'transform .4s, opacity .4s',\n  },\n  slideHiddenLeft: {\n    opacity: 0,\n    transform: 'translateX(-200px)',\n  },\n  slideHiddenRight: {\n    opacity: 0,\n    transform: 'translateX(200px)',\n  },\n  buttonContainer: {\n    position: 'absolute',\n    right: '25px',\n    bottom: '12px',\n  },\n  button: {\n    margin: '2px',\n    width: '30px',\n    height: '30px',\n    borderRadius: '7px',\n    cursor: 'pointer',\n    outline: 'none',\n    border: 'none',\n    fontSize: '20px',\n    color: palette.textSecondary,\n    backgroundColor: 'white',\n    $nest: {\n      '&:hover': {\n        backgroundColor: palette.greyLight,\n      },\n    },\n  },\n  buttonDisabled: {\n    color: palette.grey,\n    cursor: 'not-allowed',\n  },\n}\n\nexport const groups = { style }\n","export function waitMS (ms: number): Promise<any> {\n  return new Promise<any>((resolve, reject) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport function launchIntoFullscreen (element) {\n  if(element.requestFullscreen) {\n    element.requestFullscreen()\n  } else if(element.mozRequestFullScreen) {\n    element.mozRequestFullScreen()\n  } else if(element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen()\n  } else if(element.msRequestFullscreen) {\n    element.msRequestFullscreen()\n  }\n}\n\nexport function exitFullscreen() {\n  if(document.exitFullscreen) {\n    document.exitFullscreen()\n  } else if((document as any).mozCancelFullScreen) {\n    ;(document as any).mozCancelFullScreen()\n  } else if((document as any).webkitExitFullscreen) {\n    ;(document as any).webkitExitFullscreen()\n  }\n}\n\nexport function isDecendantOfId (el, id): boolean {\n  let x: HTMLElement = el\n  while (x = x.parentElement) {\n    if (x.id === id) {\n      return true\n    }\n  }\n  return false\n}\n","export const palette = {\n  primary: '#a332c2',\n  secondary: '#ca7947',\n  tertiary: '#3271c2',\n  quaternary: '#c2b132',\n  grey: '#6A6A69',\n  greyLight: '#DEDEDE',\n  textPrimary: '#363634',\n  textSecondary: '#4F4F4D',\n}\n","import * as _0 from './0'\nimport * as _1 from './1'\nimport * as _2 from './2'\nimport * as _3 from './3'\nimport * as _4 from './4'\nimport * as _5 from './5'\nimport * as _6 from './6'\nimport * as _7 from './7'\nimport * as _8 from './8'\nimport * as _9 from './9'\nimport * as _10 from './10'\nimport * as _11 from './11'\nimport * as _12 from './12'\n\nexport default {\n  0: _0,\n  1: _1,\n  2: _2,\n  3: _3,\n  4: _4,\n  5: _5,\n  6: _6,\n  7: _7,\n  8: _8,\n  9: _9,\n  10: _10,\n  11: _11,\n  12: _12,\n}\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '0'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'La Web es el futuro'),\n    h('div', {class: { [style.titleSecondary]: true }}, '¿Las aplicaciones nativas están condenadas?'),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    marginBottom: '30px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.primary,\n  },\n  titleSecondary: {\n    paddingBottom: '40px',\n    fontSize: '50px',\n    textAlign: 'center',\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '1'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, '¿Que es la web?'),\n    h('div', {class: { [style.titleSecondary]: true }}, '- Aplicación que corre sobre internet'),\n    h('div', {class: { [style.titleSecondary]: true }}, '- Plataforma para aplicaciones que corren sobre internet'),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    marginBottom: '50px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.tertiary,\n  },\n  titleSecondary: {\n    margin: '10px',\n    fontSize: '34px',\n    textAlign: 'center',\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '2'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'La Web es fascinante!'),\n    h('div', {class: { [style.titleSecondary]: true }}, 'Abierta / Multiplataforma / Potente'),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '50px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.tertiary,\n  },\n  titleSecondary: {\n    margin: '10px',\n    fontSize: '34px',\n    textAlign: 'center',\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '2'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'El poder de la Web y las PWAs'),\n    h('ul', {class: { [style.list]: true }}, [\n      h('li', {\n        class: { [style.item]: true },\n      }, 'Interacción instantánea (No requiere instalación) - Android libero InstantApps'),\n      h('li', {\n        class: { [style.item]: true },\n      }, [\n        <any> 'Trabajo offline via Service Worker API: cache, background-sync … etc, ',\n        h('a', {attrs: {\n          href: 'https://jakearchibald.com/2014/offline-cookbook/',\n          target: '_blank',\n          rel: 'noopener noreferrer',\n        } }, 'Jake Archibald offline cookbook'),\n      ]),\n      h('li', {}, 'Aplicaciones bajo demanda (Buscadores Web)'),\n      h('li', {}, 'Funcionalidad bajo demanda: Code Splitting'),\n      h('li', {}, 'Esta presentación está disponible offline :) (ejemplo)'),\n      h('li', {}, [\n        h('a', {attrs: {\n          href: 'https://hnpwa.com',\n          target: '_blank',\n          rel: 'noopener noreferrer',\n        } }, 'Hacker News PWAs'),\n      ]),\n    ]),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    padding: '20px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '10px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.tertiary,\n  },\n  list: {\n    margin: '10px',\n    fontSize: '24px',\n    $nest: {\n      'li': {\n        margin: '10px',\n      },\n    },\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '4'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'Desventajas'),\n    h('ul', {class: { [style.list]: true }}, [\n      h('li', {}, 'iOS no soporta SWs (se puede usar el meta tag), máximo en 5 años será implementado'),\n      h('li', {}, 'Las aplicaciones Web son mucho más lentas que las nativas … por ahora … ;)'),\n    ]),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '50px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.tertiary,\n  },\n  list: {\n    margin: '10px',\n    fontSize: '24px',\n    $nest: {\n      'li': {\n        margin: '10px',\n      },\n    },\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '5'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'Servo al rescate'),\n    h('ul', {class: { [style.list]: true }}, [\n      h('li', {}, 'Proyecto conjunto de Mozilla, Samsung y otras empresas'),\n      h('li', {}, 'Un motor de renderizado muy rápido, masivamente paralelo e implementado en Rust'),\n      h('li', {}, 'Rust es un lenguaje diseñado con los requerimientos de Servo en mente'),\n      h('li', {}, 'Quantum (Motor de CSS de Servo) actualmente en estado experimental en Firefox y otros componentes de Servo o “cómo reemplazar partes de un avión mientras vuela”'),\n      h('li', {}, 'Run Servo run!'),\n    ]),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '10px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.secondary,\n  },\n  list: {\n    margin: '10px',\n    fontSize: '24px',\n    $nest: {\n      'li': {\n        margin: '10px',\n      },\n    },\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '6'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, '¿Y que con JavaScript?'),\n    h('div', {class: { [style.titleSecondary]: true }}, 'Tendremos un motor de renderizado super rapido, pero JS es lento … :/'),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '10px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.quaternary,\n  },\n  titleSecondary: {\n    margin: '10px',\n    fontSize: '34px',\n    textAlign: 'center',\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '7'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'WebAssembly FTW'),\n    h('ul', {class: { [style.list]: true }}, [\n      h('li', {}, 'Formato portable, eficiente en tamaño y tiempo de carga, conveniente para compilar en la Web. Un formato binario multiplataforma :O'),\n      h('li', {}, 'Puedes compilar codigo C++ en WASM vía Emscripten, codigo C++ corriendo en el navegador!'),\n      h('li', {}, 'Unreal Engine 3 fue portado en 4 días a ASM.js (precursor de WASM) usando Emscripten:'),\n      h('li', {}, 'Velocidad comparable a la nativa: 50-67% y mejorando'),\n    ]),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '10px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.primary,\n  },\n  list: {\n    margin: '10px',\n    fontSize: '24px',\n    $nest: {\n      'li': {\n        margin: '10px',\n      },\n    },\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\n\nexport const name = '8'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('iframe', {attrs: {\n      width: '700',\n      height: '393.75',\n      src: 'https://www.youtube.com/embed/BV32Cs_CMqo',\n      frameborder: '0',\n      allowfullscreen: '',\n    }}),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n  assoc,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\nimport { compileModule, c as _c, factorialCode } from '../scripts'\n\ndeclare const monaco: any\n\nexport const name = '9'\n\nexport const state = {\n  fnString: '',\n  result: '',\n}\n\nexport type S = typeof state\n\nlet _fn: any = {}\n\nlet monacoLoaded = false\nlet codeEditor\nlet testEditor\n\nexport const inputs: Inputs<S> = ({ stateOf, toAct }) => ({\n  init: () => {\n    let loadEditor = () => {\n      monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n        noSemanticValidation: true,\n        noSyntaxValidation: false,\n      })\n      codeEditor = monaco.editor.create(document.getElementById('codeEditor'), {\n        value: factorialCode,\n        language: 'javascript'\n      })\n      testEditor = monaco.editor.create(document.getElementById('testEditor'), {\n        value: 'fn(5)',\n        language: 'javascript',\n      })\n      monacoLoaded = true\n    }\n    if ((window as any).monacoLoaded) {\n      loadEditor()\n    } else {\n      ;(window as any).onMonacoLoaded = loadEditor\n    }\n  },\n  compile: async () => {\n    let mod\n    let c = _c\n    eval('mod = ' + codeEditor.getValue())\n    try {\n      compileModule(mod).then(ex => {\n        _fn.run = ex.fn\n        console.log(_fn.run)\n        toAct('SetFnString', _fn.run.toString())\n      })\n    } catch (err) {}\n  },\n  runTest: async () => {\n    let s: S = stateOf()\n    let testCode = testEditor.getValue()\n    if (!testCode) {\n      return\n    }\n    let res\n    let fn = _fn.run\n    eval('res = ' + testCode)\n    await toAct('SetResult', res)\n  },\n})\n\nexport const actions: Actions<S> = {\n  SetFnString: assoc('fnString'),\n  SetResult: assoc('result'),\n}\n\nconst view: View<S> = ({ ctx, ev, act }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'Time to WASM!'),\n    h('div', {class: { [style.container]: true }}, [\n      h('div', {\n        class: { [style.codeEditor]: true },\n        attrs: { id: 'codeEditor' },\n      }),\n      h('div', {class: { [style.resContainer]: true }}, [\n        h('div', {\n          class: { [style.btn]: true },\n          on: { click: ev('compile') },\n        }, 'Compilar'),\n        h('div', {class: { [style.result]: true }}, s.fnString ? s.fnString : 'Sin Compilar'),\n      ]),\n      h('div', {\n        class: { [style.testEditor]: true },\n        attrs: { id: 'testEditor' },\n      }),\n      h('div', {class: { [style.resContainer]: true }}, [\n        h('div', {\n          class: { [style.btn]: true },\n          on: { click: ev('runTest') },\n        }, 'Ejecutar!'),\n        h('div', {class: { [style.result]: true }}, s.result),\n      ]),\n    ]),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '10px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.primary,\n  },\n  container: {\n    margin: '10px',\n    width: '100%',\n    height: 'calc(100% - 120px)',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    fontSize: '24px',\n  },\n  codeEditor: {\n    width: 'calc(100% - 20px)',\n    height: '280px',\n  },\n  testEditor: {\n    width: 'calc(100% - 20px)',\n    height: '20px',\n  },\n  resContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  btn: {\n    margin: '5px',\n    padding: '10px',\n    borderRadius: '4px',\n    color: palette.textSecondary,\n    cursor: 'pointer',\n    $nest: {\n      '&:hover': {\n        backgroundColor: palette.greyLight,\n      },\n    },\n  },\n  result: {\n    marginLeft: '20px',\n    borderBottom: '1px solid ' + palette.greyLight,\n  },\n}\n\nexport const groups = { style }\n","import { c as _c, Module } from '../wasm-util/ast'\nimport { BufferedEmitter } from '../wasm-util/emit'\n\nexport const c = _c\n\ndeclare const WebAssembly: any\n\nexport function arrayBufferToString (buffer) {\n  var arr = new Uint8Array(buffer)\n  var str = String.fromCharCode.apply(String, arr)\n  if(/[\\u0080-\\uffff]/.test(str)){\n      throw new Error(\"this string seems to contain (still encoded) multibytes\")\n  }\n  return str\n}\n\nexport const compileModule = (mod: Module): Promise<any> => {\n  const emitter = new BufferedEmitter(new ArrayBuffer(mod.z))\n  mod.emit(emitter)\n  return WebAssembly.compile(emitter.buffer).then(mod => {\n    let m = new WebAssembly.Instance(mod)\n    return Promise.resolve(m.exports)\n  })\n}\n\nexport const factorialModule = c.module([\n  c.type_section([\n    c.func_type([c.i32], c.i32), // type index = 0\n  ]),\n  c.function_section([\n    c.varuint32(0), // function index = 0, using type index 0\n  ]),\n  c.export_section([\n    // exports 'factorial' as function at index 0\n    c.export_entry(c.str_ascii('factorial'), c.external_kind.function, c.varuint32(0)),\n  ]),\n  c.code_section([\n    // body of function at index 0:\n    c.function_body([ /* additional local variables here */ ], [\n      c.if_(c.i32, // i32 = result type of `if` expression\n        c.i32.eq(c.get_local(c.i32, 0), c.i32.const(0)), // condition\n        [ // then\n          c.i32.const(1)\n        ],\n        [ // else\n          c.i32.mul(\n            c.get_local(c.i32, 0),\n            c.call(c.i32, c.varuint32(0), [ // 0 = function index\n              c.i32.sub(c.get_local(c.i32, 0), c.i32.const(1))\n            ])\n          )\n        ]\n      )\n    ])\n  ])\n])\n\nexport let factorial: { run? (n: number): number } = {}\n\ncompileModule(factorialModule).then(ex => {\n  factorial.run = ex.factorial\n})\n\nexport const factorialCode = `c.module([\n  c.type_section([\n    c.func_type([c.i32], c.i32), // type index = 0\n  ]),\n  c.function_section([\n    c.varuint32(0), // function index = 0, using type index 0\n  ]),\n  c.export_section([\n    // exports 'factorial' as function at index 0\n    c.export_entry(c.str_ascii('fn'), c.external_kind.function, c.varuint32(0)),\n  ]),\n  c.code_section([\n    // body of function at index 0:\n    c.function_body([ /* additional local variables here */ ], [\n      c.if_(c.i32, // i32 = result type of 'if' expression\n        c.i32.eq(c.get_local(c.i32, 0), c.i32.const(0)), // condition\n        [ // then\n          c.i32.const(1)\n        ],\n        [ // else\n          c.i32.mul(\n            c.get_local(c.i32, 0),\n            c.call(c.i32, c.varuint32(0), [ // 0 = function index\n              c.i32.sub(c.get_local(c.i32, 0), c.i32.const(1))\n            ])\n          )\n        ]\n      )\n    ])\n  ])\n])\n`\n","import {utf8} from './utf8'\nimport {Emittable, Emitter} from './emit'\n\n// For some reason we can't import basic-types into this module.\n// import {uint1,uint7,uint8,uint16,uint32,int7,int32,int64,float32,float64} from './basic-types'\nexport type uint1   = number\nexport type uint7   = number\nexport type uint8   = number\nexport type uint16  = number\nexport type uint32  = number\nexport type int7    = number\nexport type int32   = number\nexport type int64   = number\nexport type float32 = number\nexport type float64 = number\n\nconst DEBUG = false\nconst assert = DEBUG ? function(cond :any, msg? :any) {\n  if (!cond) { throw new Error('assertion failure'); }\n} : function(){}\n\n//——————————————————————————————————————————————————————————————————————————————\n// Basic node types\n\nexport type TypeTag = symbol\n\nexport interface N extends Emittable {\n  readonly t :TypeTag  // type\n  readonly z :uint32   // size in bytes (includes size of any children)\n  readonly v :any      // value\n}\n\nexport interface Atom<T> extends N {\n  readonly v :T\n}\n\nexport interface Cell<T extends N> extends N {\n  readonly v :T[]\n}\n\n//—————————————————————————————————————\n// Formal types\n//   We use a trick here to get the most out of TypeScripts type checker,\n//   namely we specify interfaces that have \"type tag\" properties.\n//   However, concrete types doesn't actually have these properties, so any\n//   attempts to access these properties will always yield `undefined`.\n\nexport interface Module extends Cell<Section> { readonly _Module: undefined\n  readonly version :uint32\n}\n\nexport type Section = CustomSection\n                    | TypeSection     // Function signature declarations\n                    | ImportSection   // Import declarations\n                    | FunctionSection // Function declarations\n                    | TableSection    // Indirect function table and other tables\n                    | MemorySection   // Memory attributes\n                    | GlobalSection   // Global declarations\n                    | ExportSection   // Exports\n                    | StartSection    // Start function declaration\n                    | ElementSection  // Elements section\n                    | CodeSection     // Function bodies (code)\n                    | DataSection     // Data segments\n\nexport interface CustomSection   extends Cell<N> { readonly _CustomSection: undefined }\nexport interface TypeSection     extends Cell<FuncType> { readonly _TypeSection: undefined }\nexport interface ImportSection   extends Cell<ImportEntry> { readonly _ImportSection: undefined }\nexport interface FunctionSection extends Cell<VarUint32> { readonly _FunctionSection: undefined }\nexport interface TableSection    extends Cell<TableType> { readonly _TableSection: undefined }\nexport interface MemorySection extends Cell<ResizableLimits>{readonly _MemorySection:undefined}\nexport interface GlobalSection   extends Cell<GlobalVariable> {readonly _GlobalSection:undefined}\nexport interface ExportSection   extends Cell<ExportEntry> { readonly _ExportSection: undefined }\nexport interface StartSection    extends Cell<Void> { readonly _StartSection: undefined }\nexport interface ElementSection  extends Cell<ElemSegment> { readonly _ElementSection: undefined}\nexport interface CodeSection     extends Cell<FunctionBody> { readonly _CodeSection: undefined }\nexport interface DataSection     extends Cell<DataSegment> { readonly _DataSection: undefined }\n\nexport interface ImportEntry extends Cell<N> { readonly _ImportEntry: undefined }\nexport interface ExportEntry extends Cell<N> { readonly _ExportEntry: undefined }\n\nexport interface FuncType extends Cell<N> { readonly _FuncType: undefined }\nexport interface TableType extends Cell<N> { readonly _TableType: undefined }\nexport interface GlobalType extends Cell<N> { readonly _GlobalType: undefined }\n\nexport interface ResizableLimits extends Cell<N> { readonly _ResizableLimits: undefined }\nexport interface GlobalVariable extends Cell<N> { readonly _GlobalVariable: undefined }\nexport interface ElemSegment extends Cell<N> { readonly _ElemSegment: undefined }\nexport interface DataSegment extends Cell<N> { readonly _DataSegment: undefined }\n\nexport interface InitExpr extends Cell<N> { readonly _InitExpr: undefined }\nexport interface FunctionBody extends Cell<N> { readonly _FunctionBody: undefined }\nexport interface LocalEntry extends Cell<N> { readonly _LocalEntry: undefined }\n\nexport interface Str extends Atom<ArrayLike<uint8>> { readonly _Str: undefined\n  readonly len :VarUint32\n}\n\nexport interface Data extends Atom<ArrayLike<uint8>> { readonly _Data: undefined }\n\nexport interface Uint8     extends Atom<uint8> {}\nexport interface Uint16    extends Atom<uint16> {}\nexport interface Uint32    extends Atom<uint32> {}\nexport interface VarUint32 extends Atom<uint32> {}\nexport interface VarUint7  extends Atom<uint7> {}\nexport interface VarUint1  extends Atom<uint1> {}\nexport interface VarInt7   extends Atom<int7> {}\nexport interface VarInt32  extends Atom<int32> {}\nexport interface VarInt64  extends Atom<int64> {}\nexport interface Float32   extends Atom<float32> {}\nexport interface Float64   extends Atom<float64> {}\n\nexport interface I32 extends VarInt32 { readonly _I32: undefined }\nexport interface I64 extends VarInt64 { readonly _I64: undefined }\nexport interface F32 extends Float32  { readonly _F32: undefined }\nexport interface F64 extends Float64  { readonly _F64: undefined }\nexport interface Void extends VarInt7 { readonly _Void :undefined }\n\nexport type Int = I32 | I64 // wasm32 | wasm64\nexport type Result = I32 | I64 | F32 | F64\nexport type AnyResult = Result | Void\nexport type AnyOp = Op<AnyResult>\n\nexport interface ValueType extends Atom<int32|int64|float32|float64> {}\ntype AnyFunc    = VarInt7\ntype Func       = VarInt7\ntype EmptyBlock = VarInt7\ntype ElemType   = AnyFunc\ntype ExternalKind = Uint8\ntype BlockType = ValueType | EmptyBlock\n\n// Memory immediate.\n// In wasm32, address operands and offset attributes have type i32\nexport type MemImm = [\n  // flags - a bitfield which currently contains the alignment in the least\n  // significant bits, encoded as log2(alignment)\n  VarUint32,\n\n  // offset - added to the address to form effective address.\n  // Useful when the address is dynamic and the compiler wants to add some\n  // constant amount of offset to the dynamically-produced address.\n  // I.e. effective_address = address + offset\n  Int\n]\n\n// Instruction opcodes\nexport type OpCode = uint8\n\nexport interface Op<R> extends N {\n  readonly _Op   :R\n  readonly r     :AnyResult\n  readonly v     :OpCode\n  readonly pre?  :N[] | N  // instrs. pushing values onto the stack, used by \"pre\" types\n  readonly imm?  :N[] | N  // immediates, used by \"imm\" types\n  readonly post? :N[]      // used by \"post\" types\n}\n\n// Operations on all number types\nexport interface NumOps<R extends Result> {\n  const(v :number) :Op<R>\n  load(mi :MemImm, addr :Op<Int>) :Op<R>\n  store(mi :MemImm, addr :Op<Int>, v :Op<R>) :Op<Void>\n  addrIsAligned(mi :MemImm, addr :number) :boolean\n  eq(a :Op<R>, b :Op<R>) :Op<I32>\n  ne(a :Op<R>, b :Op<R>) :Op<I32>\n  add(a :Op<R>, b :Op<R>) :Op<R>\n  sub(a :Op<R>, b :Op<R>) :Op<R>\n  mul(a :Op<R>, b :Op<R>) :Op<R>\n}\n\n// Operations on all integer number types\nexport interface IntOps<R extends Result> extends NumOps<R> {\n  // Memory\n  load8_s(mi :MemImm, addr :Op<Int>) :Op<R>\n  load8_u(mi :MemImm, addr :Op<Int>) :Op<R>\n  load16_s(mi :MemImm, addr :Op<Int>) :Op<R>\n  load16_u(mi :MemImm, addr :Op<Int>) :Op<R>\n  store8(mi :MemImm, addr :Op<Int>, v :Op<R>) :Op<Void>\n  store16(mi :MemImm, addr :Op<Int>, v :Op<R>) :Op<Void>\n\n  // Comparison\n  eqz (a :Op<R>)           :Op<I32>\n  lt_s(a :Op<R>, b :Op<R>) :Op<I32>\n  lt_u(a :Op<R>, b :Op<R>) :Op<I32>\n  gt_s(a :Op<R>, b :Op<R>) :Op<I32>\n  gt_u(a :Op<R>, b :Op<R>) :Op<I32>\n  le_s(a :Op<R>, b :Op<R>) :Op<I32>\n  le_u(a :Op<R>, b :Op<R>) :Op<I32>\n  ge_s(a :Op<R>, b :Op<R>) :Op<I32>\n  ge_u(a :Op<R>, b :Op<R>) :Op<I32>\n\n  // Numeric\n  clz   (a :Op<R>) :Op<R>\n  ctz   (a :Op<R>) :Op<R>\n  popcnt(a :Op<R>) :Op<R>\n  add   (a :Op<R>, b :Op<R>) :Op<R>\n  sub   (a :Op<R>, b :Op<R>) :Op<R>\n  mul   (a :Op<R>, b :Op<R>) :Op<R>\n  div_s (a :Op<R>, b :Op<R>) :Op<R>\n  div_u (a :Op<R>, b :Op<R>) :Op<R>\n  rem_s (a :Op<R>, b :Op<R>) :Op<R>\n  rem_u (a :Op<R>, b :Op<R>) :Op<R>\n  and   (a :Op<R>, b :Op<R>) :Op<R>\n  or    (a :Op<R>, b :Op<R>) :Op<R>\n  xor   (a :Op<R>, b :Op<R>) :Op<R>\n  shl   (a :Op<R>, b :Op<R>) :Op<R>\n  shr_s (a :Op<R>, b :Op<R>) :Op<R>\n  shr_u (a :Op<R>, b :Op<R>) :Op<R>\n  rotl  (a :Op<R>, b :Op<R>) :Op<R>\n  rotr  (a :Op<R>, b :Op<R>) :Op<R>\n\n  // Conversion\n  trunc_s_f32(a :Op<F32>) :Op<R>\n  trunc_u_f32(a :Op<F32>) :Op<R>\n  trunc_s_f64(a :Op<F64>) :Op<R>\n  trunc_u_f64(a :Op<F64>) :Op<R>\n}\n\nexport interface FloatOps<R extends Result> extends NumOps<R> {\n  // Comparison\n  eq(a :Op<R>, b :Op<R>) :Op<I32>\n  ne(a :Op<R>, b :Op<R>) :Op<I32>\n  lt(a :Op<R>, b :Op<R>) :Op<I32>\n  gt(a :Op<R>, b :Op<R>) :Op<I32>\n  le(a :Op<R>, b :Op<R>) :Op<I32>\n  ge(a :Op<R>, b :Op<R>) :Op<I32>\n\n  // Numeric\n  add     (a :Op<R>, b :Op<R>) :Op<R>\n  sub     (a :Op<R>, b :Op<R>) :Op<R>\n  mul     (a :Op<R>, b :Op<R>) :Op<R>\n  abs     (a :Op<R>) :Op<R>\n  neg     (a :Op<R>) :Op<R>\n  ceil    (a :Op<R>) :Op<R>\n  floor   (a :Op<R>) :Op<R>\n  trunc   (a :Op<R>) :Op<R>\n  nearest (a :Op<R>) :Op<R>\n  sqrt    (a :Op<R>) :Op<R>\n  div     (a :Op<R>, b :Op<R>) :Op<R>\n  min     (a :Op<R>, b :Op<R>) :Op<R>\n  max     (a :Op<R>, b :Op<R>) :Op<R>\n  copysign(a :Op<R>, b :Op<R>) :Op<R>\n\n  // Conversion\n  convert_s_i32(a :Op<I32>) :Op<R>\n  convert_u_i32(a :Op<I32>) :Op<R>\n  convert_s_i64(a :Op<I64>) :Op<R>\n  convert_u_i64(a :Op<I64>) :Op<R>\n}\n\nexport interface I32ops extends I32, IntOps<I32> {\n  constv(v :VarInt32) :Op<I32>\n  const(v :int32) :Op<I32>\n  wrap_i64(a :Op<I64>) :Op<I32>\n  reinterpret_f32(a :Op<F32>) :Op<I32>\n}\n\nexport interface I64ops extends I64, IntOps<I64> {\n  constv(v :VarInt64) :Op<I64>\n  const(v :int64) :Op<I64>\n  load32_s(mi :MemImm, addr :Op<Int>) :Op<I64>\n  load32_u(mi :MemImm, addr :Op<Int>) :Op<I64>\n  store32(mi :MemImm, addr :Op<Int>, v :Op<Result>) :Op<Void>\n  extend_s_i32(a :Op<I32>) :Op<I64>\n  extend_u_i32(a :Op<I32>) :Op<I64>\n  reinterpret_f64(a :Op<F64>) :Op<I64>\n}\n\nexport interface F32ops extends F32, FloatOps<F32> {\n  constv(v :Float32) :Op<F32>\n  const(v :float32) :Op<F32>\n  demote_f64(a :Op<F64>) :Op<F32>\n  reinterpret_i32(a :Op<I32>) :Op<F32>\n}\n\nexport interface F64ops extends F64, FloatOps<F64> {\n  constv(v :Float64) :Op<F64>\n  const(v :float64) :Op<F64>\n  promote_f32(a :Op<F32>) :Op<F64>\n  reinterpret_i64(a :Op<I64>) :Op<F64>\n}\n\n//——————————————————————————————————————————————————————————————————————————————\n// Type tags\n\nconst T = {\n  // Atoms\n  uint8:         Symbol('u8'),\n  uint16:        Symbol('u16'),\n  uint32:        Symbol('u32'),\n  varuint1:      Symbol('vu1'),\n  varuint7:      Symbol('vu7'),\n  varuint32:     Symbol('vu32'),\n  varint7:       Symbol('vs7'),\n  varint32:      Symbol('vs32'),\n  varint64:      Symbol('vs64'),\n  float32:       Symbol('f32'), // non-standard\n  float64:       Symbol('f64'), // non-standard\n  data:          Symbol('data'), // non-standard\n  type:          Symbol('type'), // non-standard, signifies a varint7 type constant\n  external_kind: Symbol('type'),\n\n  // Instructions\n  instr:              Symbol('instr'), // non-standard\n  instr_pre:          Symbol('instr_pre'), // non-standard\n  instr_pre1:         Symbol('instr_pre1'), // non-standard\n  instr_imm1:         Symbol('instr_imm1'), // non-standard\n  instr_imm1_post:    Symbol('instr_imm1_post'), // non-standard\n  instr_pre_imm:      Symbol('instr_pre_imm'), // non-standard\n  instr_pre_imm_post: Symbol('instr_pre_imm_post'), // non-standard\n\n  // Cells\n  module:           Symbol('module'),\n  section:          Symbol('section'),\n  import_entry:     Symbol('import_entry'),\n  export_entry:     Symbol('export_entry'),\n  local_entry:      Symbol('local_entry'),\n  func_type:        Symbol('func_type'),\n  table_type:       Symbol('table_type'),\n  memory_type:      Symbol('memory_type'),\n  global_type:      Symbol('global_type'),\n  resizable_limits: Symbol('resizable_limits'),\n  global_variable:  Symbol('global_variable'),\n  init_expr:        Symbol('init_expr'),\n  elem_segment:     Symbol('elem_segment'),\n  data_segment:     Symbol('data_segment'),\n  function_body:    Symbol('function_body'),\n  str:              Symbol('str'), // non-standard\n}\n\n//——————————————————————————————————————————————————————————————————————————————\n// node structs\n\nconst writev = (e :Emitter, objs :Emittable[]) :Emitter => objs.reduce((e, n) => n.emit(e), e)\n\nconst sumz = function(n :N[]) {\n  let sum = 0\n  for (let i = 0, L = n.length; i != L; ++i) {\n    sum += n[i].z\n  }\n  return sum\n}\n\nconst readVarInt7 = (byte :uint8) :int7 =>\n  byte < 64 ? byte : -(128 - byte)\n\nclass bytes_atom implements Atom<ArrayLike<uint8>> {\n  readonly t     :TypeTag\n  readonly z     :uint32\n  readonly v     :ArrayLike<uint8>\n\n  constructor(t :TypeTag, v :ArrayLike<uint8>) {\n    this.t = t\n    this.z = v.length\n    this.v = v\n  }\n\n  emit(e :Emitter) { return e.writeBytes(this.v) }\n}\n\nclass val_atom<T> implements Atom<T> {\n  readonly t :TypeTag\n  readonly z :uint32\n  readonly v :T\n\n  constructor(t :TypeTag, z :uint32, v :T) { this.t = t; this.z = z; this.v = v }\n  emit(e :Emitter) { return e } // override in subclasses\n}\n\nclass bytesval_atom<T extends number> extends val_atom<T> {\n  readonly bytes :ArrayLike<uint8>\n  constructor(t :TypeTag, v :T, bytes :ArrayLike<uint8>) {\n    super(t, bytes.length, v)\n    this.bytes = bytes\n  }\n  emit(e :Emitter) { return e.writeBytes(this.bytes) }\n}\n\nclass u32_atom extends val_atom<uint32> {\n  constructor(v :uint32) { super(T.uint32, 4, v) }\n  emit(e :Emitter) { return e.writeU32(this.v) }\n}\n\nclass f32_atom extends val_atom<float32> {\n  constructor(v :number) { super(T.float32, 4, v) }\n  emit(e :Emitter) { return e.writeF32(this.v) }\n}\n\nclass f64_atom extends val_atom<float64> {\n  constructor(v :number) { super(T.float64, 8, v) }\n  emit(e :Emitter) { return e.writeF64(this.v) }\n}\n\nclass u8_atom<T extends number> extends val_atom<T> {\n  constructor(t :TypeTag, v :T) { super(t, 1, v) }\n  emit(e :Emitter) { return e.writeU8(this.v) }\n}\n\nclass type_atom extends u8_atom<int7> {\n  readonly b :uint8\n  constructor(v :int7, b :uint8) { super(T.type, v); this.b = b }\n  emit(e :Emitter) { return e.writeU8(this.b) }\n}\n\nclass str_atom implements Atom<ArrayLike<uint8>> {\n  readonly t   :TypeTag\n  readonly z   :uint32\n  readonly v   :ArrayLike<uint8>\n  readonly len :VarUint32\n\n  constructor(len: VarUint32, v :ArrayLike<uint8>) {\n    assert(len.v == v.length)\n    this.t = T.str\n    this.z = len.z + v.length\n    this.v = v\n    this.len = len\n  }\n  emit(e :Emitter) { return this.len.emit(e).writeBytes(this.v) }\n}\n\nclass cell<T extends N> implements Cell<T> {\n  readonly t :TypeTag\n  readonly z :uint32\n  readonly v :T[]\n\n  constructor(t :TypeTag, v :T[]) {\n    this.t = t\n    this.z = sumz(v)\n    this.v = v\n  }\n\n  emit(e :Emitter) { return writev(e, this.v) }\n}\n\n//—————————————————————————————————————————————\n\n// Instructions\n\nclass instr_atom extends u8_atom<uint8> {\n  readonly r :AnyResult\n  constructor(v :uint8, r :AnyResult) { super(T.instr, v); this.r = r }\n}\n\nclass instr_cell implements N {\n  readonly t   :TypeTag\n  readonly z   :uint32\n  readonly v   :OpCode\n  readonly r   :AnyResult\n\n  constructor(t :TypeTag, op :uint8, r :AnyResult, z :uint32) {\n    this.t = t\n    this.z = z\n    this.v = op\n    this.r = r\n  }\n  emit(e :Emitter) { return e }\n}\n\nclass instr_pre1 extends instr_cell {\n  readonly pre :N\n  constructor(op :uint8, r :AnyResult, pre :N) {\n    super(T.instr_pre1, op, r, 1 + pre.z)\n    this.pre = pre\n  }\n  emit(e :Emitter) { return this.pre.emit(e).writeU8(this.v) }\n}\n\nclass instr_imm1 extends instr_cell {\n  readonly imm :N\n  constructor(op :uint8, r :AnyResult, imm :N) {\n    super(T.instr_imm1, op, r, 1 + imm.z)\n    this.imm = imm\n  }\n  emit(e :Emitter) { return this.imm.emit(e.writeU8(this.v)) }\n}\n\nclass instr_pre extends instr_cell {\n  readonly pre :N[]\n  constructor(op :uint8, r :AnyResult, pre :N[]) {\n    super(T.instr_pre, op, r, 1 + sumz(pre))\n    this.pre = pre\n  }\n  emit(e :Emitter) { return writev(e, this.pre).writeU8(this.v) }\n}\n\nclass instr_imm1_post extends instr_cell {\n  readonly imm :N\n  readonly post :N[]\n  constructor(op :uint8, r :AnyResult, imm :N, post :N[]) {\n    super(T.instr_imm1_post, op, r, 1 + imm.z + sumz(post))\n    this.imm = imm\n    this.post = post\n  }\n  emit(e :Emitter) { return writev(this.imm.emit(e.writeU8(this.v)), this.post) }\n}\n\nclass instr_pre_imm extends instr_cell {\n  readonly pre :N[]\n  readonly imm :N[]\n  constructor(op :uint8, r :AnyResult, pre :N[], imm :N[]) {\n    super(T.instr_pre_imm, op, r, 1 + sumz(pre) + sumz(imm))\n    this.pre = pre\n    this.imm = imm\n  }\n  emit(e :Emitter) { return writev(writev(e, this.pre).writeU8(this.v), this.imm) }\n}\n\nclass instr_pre_imm_post extends instr_cell {\n  readonly pre  :N[]\n  readonly imm  :N[]\n  readonly post :N[]\n  constructor(op :uint8, r :AnyResult, pre :N[], imm :N[], post :N[]) {\n    super(T.instr_pre_imm_post, op, r, 1 + sumz(pre) + sumz(imm) + sumz(post))\n    this.pre = pre\n    this.imm = imm\n    this.post = post\n  }\n  emit(e :Emitter) {\n    return writev(writev(writev(e, this.pre).writeU8(this.v), this.imm), this.post)\n  }\n}\n\nfunction maprange<R>(start:number, stop:number, fn:(v:number)=>R|undefined) :Array<R> {\n  let a :R[] = []\n  while (start < stop) {\n    let v :R = fn(start)\n    if (v !== undefined) {\n      a.push(v)\n    }\n    start += 1\n  }\n  return a\n}\n\n//——————————————————————————————————————————————————————————————————————————————\n// constructors\n\nconst uint8Cache :Uint8[] = maprange(0,16, v =>\n  new u8_atom<uint8>(T.uint8, v as uint8))\nconst varUint7Cache :VarUint7[] = maprange(0,16, v =>\n  new u8_atom<uint7>(T.varuint7, v as uint8))\nconst varUint32Cache :VarUint7[] = maprange(0,16, v =>\n  new u8_atom<uint32>(T.varuint32, v as uint8))\nconst varuint1_0 = new u8_atom<uint1>(T.varuint1, 0) as Atom<uint1>\nconst varuint1_1 = new u8_atom<uint1>(T.varuint1, 1) as Atom<uint1>\n\nfunction uint8(v :uint8) {\n  return uint8Cache[v] || new u8_atom<uint8>(T.uint8, v) as Uint8\n}\nfunction uint32(v :uint32)  { return new u32_atom(v) as Uint32 }\nfunction float32(v :float32) { return new f32_atom(v) as Float32 }\nfunction float64(v :float64) { return new f64_atom(v) as Float64 }\n\n// LEB128-encoded variable-length integers: (N = bits)\n//   unsigned range: [0, 2^N-1]\n//   signed range:   [-2^(N-1), +2^(N-1)-1]\n\nfunction varuint1(v :any) {\n  return v ? varuint1_1 : varuint1_0\n}\n\nfunction varuint7(v :uint7) {\n  assert(v >= 0 && v <= 128)\n  return varUint7Cache[v] || new u8_atom<uint7>(T.varuint7, v) as VarUint7\n}\n\nfunction varuint32(value :uint32) {\n  const c = varUint32Cache[value]\n  if (c) { return c }\n  assert(value >= 0 && value <= 0xffffffff)\n\n  let v = value\n  const bytes :uint8[] = []\n  while (v >= 0x80) {\n    bytes.push((v & 0x7f) | 0x80)\n    v >>>= 7\n  }\n  bytes.push(v)\n\n  return new bytesval_atom<uint32>(T.varuint32, value, bytes) as VarUint32\n}\n\nfunction varint7(value :int7) {\n  assert(value >= -64 && value <= 63);\n  return new u8_atom<int7>(T.varint7, value < 0 ? (128 + value) : value) as VarInt7\n}\n\nfunction encVarIntN(v :int64) :uint8[] {\n  // FIXME: broken for values larger than uint32\n  const bytes :uint8[] = []\n  while (true) {\n    let b = v & 0x7f\n    if (-64 <= v && v < 64) {\n      bytes.push(b)\n      break\n    }\n    v >>= 7 // Note: sign-propagating right shift\n    bytes.push(b | 0x80)\n  }\n  return bytes\n}\n\nfunction varint32(value :int32) :VarInt32 {\n  assert(value >= -0x80000000 && value <= 0x7fffffff)\n  return new bytesval_atom<int32>(T.varint32, value, encVarIntN(value)) as VarInt32\n}\n\nfunction varint64(value :int64) :VarInt64 {\n  // Here be dragons! Not all negative 64bit numbers can be represented with\n  // JavaScript numbers. The ECMAScript double type has 53 bits of integer\n  // precision. We thus assert this range\n  assert(value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER)\n  return new bytesval_atom<int64>(T.varint64, value, encVarIntN(value)) as VarInt64\n}\n\n\n// Language types\nconst AnyFunc    = new type_atom(-0x10, 0x70) as any as AnyFunc\nconst Func       = new type_atom(-0x20, 0x60) as any as Func\nconst EmptyBlock = new type_atom(-0x40, 0x40) as any as EmptyBlock\nconst Void       = EmptyBlock as any as Void\n\nconst external_kind_function = new u8_atom<uint8>(T.external_kind, 0) as any as ExternalKind\nconst external_kind_table    = new u8_atom<uint8>(T.external_kind, 1) as any as ExternalKind\nconst external_kind_memory   = new u8_atom<uint8>(T.external_kind, 2) as any as ExternalKind\nconst external_kind_global   = new u8_atom<uint8>(T.external_kind, 3) as any as ExternalKind\n\nconst str = (data: ArrayLike<uint8>) =>\n  new str_atom(varuint32(data.length), data) as any as Str\n\nconst sect_id_custom = varuint7(0)\nconst sect_id_type = varuint7(1)\nconst sect_id_import = varuint7(2)\nconst sect_id_function = varuint7(3)\nconst sect_id_table = varuint7(4)\nconst sect_id_memory = varuint7(5)\nconst sect_id_global = varuint7(6)\nconst sect_id_export = varuint7(7)\nconst sect_id_start = varuint7(8)\nconst sect_id_element = varuint7(9)\nconst sect_id_code = varuint7(10)\nconst sect_id_data = varuint7(11)\n\nexport const sect_id = {\n  custom: sect_id_custom,\n  type: sect_id_type,\n  import: sect_id_import,\n  function: sect_id_function,\n  table: sect_id_table,\n  memory: sect_id_memory,\n  global: sect_id_global,\n  export: sect_id_export,\n  start: sect_id_start,\n  element: sect_id_element,\n  code: sect_id_code,\n  data: sect_id_data,\n}\n\nfunction section(id :VarUint7, imm :N, payload :N[]) {\n  return new cell<N>(T.section,\n    [id, varuint32(imm.z + sumz(payload)), imm, ...payload]\n  )\n}\n\n\nconst memload = <R extends Result>(op :OpCode, r :R, mi :MemImm, addr :Op<Int>) =>\n  new instr_pre_imm(op, r, [addr], mi) as any as Op<R>\n\nconst memstore = (op :OpCode, mi :MemImm, addr :Op<Int>, v :Op<Result>) =>\n  new instr_pre_imm(op, Void, [addr, v], mi) as any as Op<Void>\n\n// memAddrIsAligned returns true if the memory operation will actually be aligned.\n// Note: natAl and al should be encoded as log2(bits), i.e. 32bit = 2\nconst addrIsAligned = (natAl :uint32, al :uint32, offs :number, addr :number) =>\n  al <= natAl &&\n  ((addr + offs) % [1, 2, 4, 8][al]) == 0\n\n\nclass i32ops extends type_atom implements I32ops { readonly _I32: undefined;\n  // Constants\n  constv(v :VarInt32) { return new instr_imm1(0x41, this, v) as any as Op<I32> }\n  const(v :int32) :Op<I32> { return this.constv(varint32(v)) }\n\n  // Memory\n  load(mi :MemImm, addr :Op<Int>) { return memload(0x28, this, mi, addr) }\n  load8_s(mi :MemImm, addr :Op<Int>) { return memload(0x2c, this, mi, addr) }\n  load8_u(mi :MemImm, addr :Op<Int>) { return memload(0x2d, this, mi, addr) }\n  load16_s(mi :MemImm, addr :Op<Int>) { return memload(0x2e, this, mi, addr) }\n  load16_u(mi :MemImm, addr :Op<Int>) { return memload(0x2f, this, mi, addr) }\n  store(mi :MemImm, addr :Op<Int>, v :Op<I32>) { return memstore(0x36, mi, addr, v) }\n  store8(mi :MemImm, addr :Op<Int>, v :Op<I32>) { return memstore(0x3a, mi, addr, v) }\n  store16(mi :MemImm, addr :Op<Int>, v :Op<I32>) { return memstore(0x3b, mi, addr, v) }\n  addrIsAligned(mi :MemImm, addr :number) { return addrIsAligned(2, mi[0].v, mi[1].v, addr) }\n\n  // Comparison\n  eqz (a :Op<I32>)             { return new instr_pre1(0x45,this,a)    as any as Op<I32> }\n  eq  (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x46,this,[a,b]) as any as Op<I32> }\n  ne  (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x47,this,[a,b]) as any as Op<I32> }\n  lt_s(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x48,this,[a,b]) as any as Op<I32> }\n  lt_u(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x49,this,[a,b]) as any as Op<I32> }\n  gt_s(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x4a,this,[a,b]) as any as Op<I32> }\n  gt_u(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x4b,this,[a,b]) as any as Op<I32> }\n  le_s(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x4c,this,[a,b]) as any as Op<I32> }\n  le_u(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x4d,this,[a,b]) as any as Op<I32> }\n  ge_s(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x4e,this,[a,b]) as any as Op<I32> }\n  ge_u(a :Op<I32>, b :Op<I32>) { return new instr_pre(0x4f,this,[a,b]) as any as Op<I32> }\n\n  // Numeric\n  clz   (a :Op<I32>)             { return new instr_pre1(0x67,this,a)    as any as Op<I32> }\n  ctz   (a :Op<I32>)             { return new instr_pre1(0x68,this,a)    as any as Op<I32> }\n  popcnt(a :Op<I32>)             { return new instr_pre1(0x69,this,a)    as any as Op<I32> }\n  add   (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x6a,this,[a,b]) as any as Op<I32> }\n  sub   (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x6b,this,[a,b]) as any as Op<I32> }\n  mul   (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x6c,this,[a,b]) as any as Op<I32> }\n  div_s (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x6d,this,[a,b]) as any as Op<I32> }\n  div_u (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x6e,this,[a,b]) as any as Op<I32> }\n  rem_s (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x6f,this,[a,b]) as any as Op<I32> }\n  rem_u (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x70,this,[a,b]) as any as Op<I32> }\n  and   (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x71,this,[a,b]) as any as Op<I32> }\n  or    (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x72,this,[a,b]) as any as Op<I32> }\n  xor   (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x73,this,[a,b]) as any as Op<I32> }\n  shl   (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x74,this,[a,b]) as any as Op<I32> }\n  shr_s (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x75,this,[a,b]) as any as Op<I32> }\n  shr_u (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x76,this,[a,b]) as any as Op<I32> }\n  rotl  (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x77,this,[a,b]) as any as Op<I32> }\n  rotr  (a :Op<I32>, b :Op<I32>) { return new instr_pre(0x78,this,[a,b]) as any as Op<I32> }\n\n  // Conversion\n  wrap_i64        (a :Op<I64>) { return new instr_pre1(0xa7,this,a) as any as Op<I32> }\n  trunc_s_f32     (a :Op<F32>) { return new instr_pre1(0xa8,this,a) as any as Op<I32> }\n  trunc_u_f32     (a :Op<F32>) { return new instr_pre1(0xa9,this,a) as any as Op<I32> }\n  trunc_s_f64     (a :Op<F64>) { return new instr_pre1(0xaa,this,a) as any as Op<I32> }\n  trunc_u_f64     (a :Op<F64>) { return new instr_pre1(0xab,this,a) as any as Op<I32> }\n  reinterpret_f32 (a :Op<F32>) { return new instr_pre1(0xbc,this,a) as any as Op<I32> }\n}\n\nclass i64ops extends type_atom implements I64ops { readonly _I64: undefined\n  // Constants\n  constv(v :VarInt64) { return new instr_imm1(0x42, this, v) as any as Op<I64> }\n  const(v :int64) :Op<I64> { return this.constv(varint64(v)) }\n\n  // Memory\n  load(mi :MemImm, addr :Op<Int>)     { return memload(0x29, this, mi, addr) }\n  load8_s(mi :MemImm, addr :Op<Int>)  { return memload(0x30, this, mi, addr) }\n  load8_u(mi :MemImm, addr :Op<Int>)  { return memload(0x31, this, mi, addr) }\n  load16_s(mi :MemImm, addr :Op<Int>) { return memload(0x32, this, mi, addr) }\n  load16_u(mi :MemImm, addr :Op<Int>) { return memload(0x33, this, mi, addr) }\n  load32_s(mi :MemImm, addr :Op<Int>) { return memload(0x34, this, mi, addr) }\n  load32_u(mi :MemImm, addr :Op<Int>) { return memload(0x35, this, mi, addr) }\n  store(mi :MemImm, addr :Op<Int>, v :Op<I64>)   { return memstore(0x37, mi, addr, v) }\n  store8 (mi :MemImm, addr :Op<Int>, v :Op<I64>) { return memstore(0x3c, mi, addr, v) }\n  store16(mi :MemImm, addr :Op<Int>, v :Op<I64>) { return memstore(0x3d, mi, addr, v) }\n  store32(mi :MemImm, addr :Op<Int>, v :Op<I64>) { return memstore(0x3e, mi, addr, v) }\n  addrIsAligned(mi :MemImm, addr :number) { return addrIsAligned(3, mi[0].v, mi[1].v, addr) }\n\n  // Comparison\n  eqz (a :Op<I64>)             { return new instr_pre1(0x50,this,a)    as any as Op<I32> }\n  eq  (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x51,this,[a,b]) as any as Op<I32> }\n  ne  (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x52,this,[a,b]) as any as Op<I32> }\n  lt_s(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x53,this,[a,b]) as any as Op<I32> }\n  lt_u(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x54,this,[a,b]) as any as Op<I32> }\n  gt_s(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x55,this,[a,b]) as any as Op<I32> }\n  gt_u(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x56,this,[a,b]) as any as Op<I32> }\n  le_s(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x57,this,[a,b]) as any as Op<I32> }\n  le_u(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x58,this,[a,b]) as any as Op<I32> }\n  ge_s(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x59,this,[a,b]) as any as Op<I32> }\n  ge_u(a :Op<I64>, b :Op<I64>) { return new instr_pre(0x5a,this,[a,b]) as any as Op<I32> }\n\n  // Numeric\n  clz   (a :Op<I64>)             { return new instr_pre1(0x79,this,a)    as any as Op<I64> }\n  ctz   (a :Op<I64>)             { return new instr_pre1(0x7a,this,a)    as any as Op<I64> }\n  popcnt(a :Op<I64>)             { return new instr_pre1(0x7b,this,a)    as any as Op<I64> }\n  add   (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x7c,this,[a,b]) as any as Op<I64> }\n  sub   (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x7d,this,[a,b]) as any as Op<I64> }\n  mul   (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x7e,this,[a,b]) as any as Op<I64> }\n  div_s (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x7f,this,[a,b]) as any as Op<I64> }\n  div_u (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x80,this,[a,b]) as any as Op<I64> }\n  rem_s (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x81,this,[a,b]) as any as Op<I64> }\n  rem_u (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x82,this,[a,b]) as any as Op<I64> }\n  and   (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x83,this,[a,b]) as any as Op<I64> }\n  or    (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x84,this,[a,b]) as any as Op<I64> }\n  xor   (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x85,this,[a,b]) as any as Op<I64> }\n  shl   (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x86,this,[a,b]) as any as Op<I64> }\n  shr_s (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x87,this,[a,b]) as any as Op<I64> }\n  shr_u (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x88,this,[a,b]) as any as Op<I64> }\n  rotl  (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x89,this,[a,b]) as any as Op<I64> }\n  rotr  (a :Op<I64>, b :Op<I64>) { return new instr_pre(0x8a,this,[a,b]) as any as Op<I64> }\n\n  // Conversions\n  extend_s_i32    (a :Op<I32>) { return new instr_pre1(0xac,this,a) as any as Op<I64> }\n  extend_u_i32    (a :Op<I32>) { return new instr_pre1(0xad,this,a) as any as Op<I64> }\n  trunc_s_f32     (a :Op<F32>) { return new instr_pre1(0xae,this,a) as any as Op<I64> }\n  trunc_u_f32     (a :Op<F32>) { return new instr_pre1(0xaf,this,a) as any as Op<I64> }\n  trunc_s_f64     (a :Op<F64>) { return new instr_pre1(0xb0,this,a) as any as Op<I64> }\n  trunc_u_f64     (a :Op<F64>) { return new instr_pre1(0xb1,this,a) as any as Op<I64> }\n  reinterpret_f64 (a :Op<F64>) { return new instr_pre1(0xbd,this,a) as any as Op<I64> }\n}\n\n\nclass f32ops extends type_atom implements F32ops { readonly _F32: undefined;\n  // Constants\n  constv(v :Float32) { return new instr_imm1(0x43, this, v) as any as Op<F32> }\n  const(v :float32) :Op<F32> { return this.constv(float32(v)) }\n\n  // Memory\n  load(mi :MemImm, addr :Op<Int>) { return memload(0x2a, this, mi, addr) }\n  store(mi :MemImm, addr :Op<Int>, v :Op<F32>) { return memstore(0x38, mi, addr, v) }\n  addrIsAligned(mi :MemImm, addr :number) { return addrIsAligned(2, mi[0].v, mi[1].v, addr) }\n\n  // Comparison\n  eq(a :Op<F32>, b :Op<F32>) { return new instr_pre(0x5b,this,[a,b]) as any as Op<I32> }\n  ne(a :Op<F32>, b :Op<F32>) { return new instr_pre(0x5c,this,[a,b]) as any as Op<I32> }\n  lt(a :Op<F32>, b :Op<F32>) { return new instr_pre(0x5d,this,[a,b]) as any as Op<I32> }\n  gt(a :Op<F32>, b :Op<F32>) { return new instr_pre(0x5e,this,[a,b]) as any as Op<I32> }\n  le(a :Op<F32>, b :Op<F32>) { return new instr_pre(0x5f,this,[a,b]) as any as Op<I32> }\n  ge(a :Op<F32>, b :Op<F32>) { return new instr_pre(0x60,this,[a,b]) as any as Op<I32> }\n\n  // Numeric\n  abs     (a :Op<F32>) { return new instr_pre1(0x8b,this,a) as any as Op<F32> }\n  neg     (a :Op<F32>) { return new instr_pre1(0x8c,this,a) as any as Op<F32> }\n  ceil    (a :Op<F32>) { return new instr_pre1(0x8d,this,a) as any as Op<F32> }\n  floor   (a :Op<F32>) { return new instr_pre1(0x8e,this,a) as any as Op<F32> }\n  trunc   (a :Op<F32>) { return new instr_pre1(0x8f,this,a) as any as Op<F32> }\n  nearest (a :Op<F32>) { return new instr_pre1(0x90,this,a) as any as Op<F32> }\n  sqrt    (a :Op<F32>) { return new instr_pre1(0x91,this,a) as any as Op<F32> }\n  add     (a :Op<F32>, b :Op<F32>) { return new instr_pre(0x92,this,[a,b]) as any as Op<F32> }\n  sub     (a :Op<F32>, b :Op<F32>) { return new instr_pre(0x93,this,[a,b]) as any as Op<F32> }\n  mul     (a :Op<F32>, b :Op<F32>) { return new instr_pre(0x94,this,[a,b]) as any as Op<F32> }\n  div     (a :Op<F32>, b :Op<F32>) { return new instr_pre(0x95,this,[a,b]) as any as Op<F32> }\n  min     (a :Op<F32>, b :Op<F32>) { return new instr_pre(0x96,this,[a,b]) as any as Op<F32> }\n  max     (a :Op<F32>, b :Op<F32>) { return new instr_pre(0x97,this,[a,b]) as any as Op<F32> }\n  copysign(a :Op<F32>, b :Op<F32>) { return new instr_pre(0x98,this,[a,b]) as any as Op<F32> }\n\n  // Conversion\n  convert_s_i32  (a :Op<I32>) { return new instr_pre1(0xb2,this,a) as any as Op<F32> }\n  convert_u_i32  (a :Op<I32>) { return new instr_pre1(0xb3,this,a) as any as Op<F32> }\n  convert_s_i64  (a :Op<I64>) { return new instr_pre1(0xb4,this,a) as any as Op<F32> }\n  convert_u_i64  (a :Op<I64>) { return new instr_pre1(0xb5,this,a) as any as Op<F32> }\n  demote_f64     (a :Op<F64>) { return new instr_pre1(0xb6,this,a) as any as Op<F32> }\n  reinterpret_i32(a :Op<I32>) { return new instr_pre1(0xbe,this,a) as any as Op<F32> }\n}\n\nclass f64ops extends type_atom implements F64ops { readonly _F64: undefined;\n  // Constants\n  constv(v :Float64) { return new instr_imm1(0x44, this, v) as any as Op<F64> }\n  const(v :float64) :Op<F64> { return this.constv(float64(v)) }\n\n  // Memory\n  load(mi :MemImm, addr :Op<Int>) { return memload(0x2b, this, mi, addr) }\n  store(mi :MemImm, addr :Op<Int>, v :Op<F64>) { return memstore(0x39, mi, addr, v) }\n  addrIsAligned(mi :MemImm, addr :number) { return addrIsAligned(3, mi[0].v, mi[1].v, addr) }\n\n  // Comparison\n  eq(a :Op<F64>, b :Op<F64>) { return new instr_pre(0x61,this,[a,b]) as any as Op<I32> }\n  ne(a :Op<F64>, b :Op<F64>) { return new instr_pre(0x62,this,[a,b]) as any as Op<I32> }\n  lt(a :Op<F64>, b :Op<F64>) { return new instr_pre(0x63,this,[a,b]) as any as Op<I32> }\n  gt(a :Op<F64>, b :Op<F64>) { return new instr_pre(0x64,this,[a,b]) as any as Op<I32> }\n  le(a :Op<F64>, b :Op<F64>) { return new instr_pre(0x65,this,[a,b]) as any as Op<I32> }\n  ge(a :Op<F64>, b :Op<F64>) { return new instr_pre(0x66,this,[a,b]) as any as Op<I32> }\n\n  // Numeric\n  abs     (a :Op<F64>) { return new instr_pre1(0x99,this,a) as any as Op<F64> }\n  neg     (a :Op<F64>) { return new instr_pre1(0x9a,this,a) as any as Op<F64> }\n  ceil    (a :Op<F64>) { return new instr_pre1(0x9b,this,a) as any as Op<F64> }\n  floor   (a :Op<F64>) { return new instr_pre1(0x9c,this,a) as any as Op<F64> }\n  trunc   (a :Op<F64>) { return new instr_pre1(0x9d,this,a) as any as Op<F64> }\n  nearest (a :Op<F64>) { return new instr_pre1(0x9e,this,a) as any as Op<F64> }\n  sqrt    (a :Op<F64>) { return new instr_pre1(0x9f,this,a) as any as Op<F64> }\n  add     (a :Op<F64>, b :Op<F64>) { return new instr_pre(0xa0,this,[a,b]) as any as Op<F64> }\n  sub     (a :Op<F64>, b :Op<F64>) { return new instr_pre(0xa1,this,[a,b]) as any as Op<F64> }\n  mul     (a :Op<F64>, b :Op<F64>) { return new instr_pre(0xa2,this,[a,b]) as any as Op<F64> }\n  div     (a :Op<F64>, b :Op<F64>) { return new instr_pre(0xa3,this,[a,b]) as any as Op<F64> }\n  min     (a :Op<F64>, b :Op<F64>) { return new instr_pre(0xa4,this,[a,b]) as any as Op<F64> }\n  max     (a :Op<F64>, b :Op<F64>) { return new instr_pre(0xa5,this,[a,b]) as any as Op<F64> }\n  copysign(a :Op<F64>, b :Op<F64>) { return new instr_pre(0xa6,this,[a,b]) as any as Op<F64> }\n\n  // Conversions\n  convert_s_i32  (a :Op<I32>) { return new instr_pre1(0xb7,this,a) as any as Op<F64> }\n  convert_u_i32  (a :Op<I32>) { return new instr_pre1(0xb8,this,a) as any as Op<F64> }\n  convert_s_i64  (a :Op<I64>) { return new instr_pre1(0xb9,this,a) as any as Op<F64> }\n  convert_u_i64  (a :Op<I64>) { return new instr_pre1(0xba,this,a) as any as Op<F64> }\n  promote_f32    (a :Op<F32>) { return new instr_pre1(0xbb,this,a) as any as Op<F64> }\n  reinterpret_i64(a :Op<I64>) { return new instr_pre1(0xbf,this,a) as any as Op<F64> }\n}\n\nconst magic = uint32(0x6d736100)\nconst latestVersion = uint32(0x1)\nconst end = new instr_atom(0x0b, Void) as any as Op<Void>\nconst elseOp = new instr_atom(0x05, Void) as any as Op<Void>\n\nfunction if_<R extends AnyResult>(r :R, cond :Op<I32>, then_ :AnyOp[], else_? :AnyOp[]) {\n  assert(r === then_[then_.length-1].r)\n  assert(!else_ || else_.length == 0 || r === else_[else_.length-1].r)\n  return new instr_pre_imm_post(0x04, r,\n    [cond], // pre\n    [r],    // imm\n    // post:\n    else_ ? [...then_, elseOp, ...else_, end] :\n            [...then_, end]\n  ) as any as Op<R>\n}\n\nconst return_ = <R extends Result>(value :Op<R>) =>\n  new instr_pre1(0x0f, value.r, value) as any as Op<R>\n\nexport const t = T\n\nexport const c = {\n  uint8,\n  uint32,\n  float32,\n  float64,\n  varuint1,\n  varuint7,\n  varuint32,\n  varint7,\n  varint32,\n  varint64,\n\n  any_func: AnyFunc,\n  func: Func,\n  empty_block: EmptyBlock,\n  void: Void, void_: Void,\n\n  external_kind: {\n    function: external_kind_function, // Function import or definition\n    table:    external_kind_table,    // Table import or definition\n    memory:   external_kind_memory,   // Memory import or definition\n    global:   external_kind_global,   // Global import or definition\n  },\n\n  data(buf: ArrayLike<uint8>) {\n    return new bytes_atom(T.data, buf) as any as Data\n  },\n\n  str,\n\n  str_ascii(text: string) {\n    const bytes :uint8[] = []\n    for (let i = 0, L = text.length; i != L; ++i) {\n      bytes[i] = 0xff & text.charCodeAt(i);\n    }\n    return str(bytes)\n  },\n\n  str_utf8: (text: string) =>\n    str(utf8.encode(text)),\n\n  // If you are targeting a pre-MVP version, provide the desired version number (e.g. `0xd`).\n  // If not provided or falsy, the latest stable version is used.\n  module(sections :Section[], version? :uint32) {\n    const v = version ? uint32(version) : latestVersion\n    return new cell<Section>(T.module,\n      [magic, v, ...sections] as Section[]) as any as Module\n  },\n\n  custom_section: (name :Str, payload :N[]) =>\n    section(sect_id_custom, name, payload) as any as CustomSection,\n\n  type_section: (types: FuncType[]) =>\n    section(sect_id_type, varuint32(types.length), types) as any as TypeSection,\n\n  import_section: (entries: ImportEntry[]) =>\n    section(sect_id_import, varuint32(entries.length), entries) as any as ImportSection,\n\n  function_section: (types: VarUint32[]) =>\n    section(sect_id_function, varuint32(types.length), types) as any as FunctionSection,\n\n  table_section: (types: TableType[]) =>\n    section(sect_id_table, varuint32(types.length), types) as any as TableSection,\n\n  memory_section: (limits: ResizableLimits[]) =>\n    section(sect_id_memory, varuint32(limits.length), limits) as any as MemorySection,\n\n  global_section: (globals: GlobalVariable[]) =>\n    section(sect_id_global, varuint32(globals.length), globals) as any as GlobalSection,\n\n  export_section: (exports: ExportEntry[]) =>\n    section(sect_id_export, varuint32(exports.length), exports) as any as ExportSection,\n\n  start_section: (funcIndex: VarUint32) =>\n    section(sect_id_start, funcIndex, []) as any as StartSection,\n\n  element_section: (entries: ElemSegment[]) =>\n    section(sect_id_element, varuint32(entries.length), entries) as any as ElementSection,\n\n  code_section: (bodies: FunctionBody[]) =>\n    section(sect_id_code, varuint32(bodies.length), bodies) as any as CodeSection,\n\n  data_section: (entries: DataSegment[]) =>\n    section(sect_id_data, varuint32(entries.length), entries) as any as DataSection,\n\n\n  function_import_entry: (module :Str, field :Str, typeIndex: VarUint32) =>\n    new cell<N>(T.import_entry, [\n      module, field, external_kind_function, typeIndex\n    ]) as any as ImportEntry,\n\n  table_import_entry: (module :Str, field :Str, type: TableType) =>\n    new cell<N>(T.import_entry,\n      [module, field, external_kind_table, type]) as any as ImportEntry,\n\n  memory_import_entry: (module :Str, field :Str, limits: ResizableLimits) =>\n    new cell<N>(T.import_entry,\n      [module, field, external_kind_memory, limits]) as any as ImportEntry,\n\n  global_import_entry: (module :Str, field :Str, type: GlobalType) =>\n    new cell<N>(T.import_entry,\n      [module, field, external_kind_global, type]) as any as ImportEntry,\n\n\n  export_entry: (field :Str, kind :ExternalKind, index :VarUint32) =>\n    new cell<N>(T.export_entry, [field, kind, index]) as any as ExportEntry,\n\n\n  elem_segment: (index :VarUint32, offset :InitExpr, funcIndex :VarUint32[]) =>\n    new cell<N>(T.elem_segment, [\n      index, offset, varuint32(funcIndex.length), ...funcIndex\n    ]) as any as ElemSegment,\n\n  data_segment: (index :VarUint32, offset :InitExpr, data :Data) =>\n    new cell<N>(T.data_segment, [index, offset, varuint32(data.z), data]) as any as DataSegment,\n\n\n  func_type(paramTypes :ValueType[], returnType? :ValueType|null) {\n    const paramLen = varuint32(paramTypes.length)\n    return new cell(T.func_type,\n      returnType ? [Func, paramLen, ...paramTypes, varuint1_1, returnType]\n                 : [Func, paramLen, ...paramTypes, varuint1_0]) as any as FuncType\n  },\n\n  table_type(type :ElemType, limits :ResizableLimits) {\n    assert(type.v == AnyFunc.v) // WASM MVP limitation\n    return new cell<N>(T.table_type, [type, limits]) as any as TableType\n  },\n\n  global_type: (contentType :ValueType, mutable? :boolean) =>\n    new cell<N>(T.global_type, [\n      contentType, mutable ? varuint1_1 : varuint1_0\n    ]) as any as GlobalType,\n\n\n  // expressed in number of memory pages (not bytes; pagesize=64KiB)\n  resizable_limits: (initial :VarUint32, maximum? :VarUint32) =>\n    new cell<N>(T.resizable_limits, maximum ?\n      [varuint1_1, initial, maximum] : [varuint1_0, initial]\n    ) as any as ResizableLimits,\n\n  global_variable: (type :GlobalType, init :InitExpr) =>\n    new cell<N>(T.global_variable, [type, init]) as any as GlobalVariable,\n\n  init_expr: (expr :N[]) =>\n    new cell<N>(T.init_expr, [...expr, end]) as any as InitExpr,\n\n  function_body(locals :LocalEntry[], code :N[]) {\n    const localCount = varuint32(locals.length)\n    return new cell<N>(T.function_body, [\n      varuint32(localCount.z + sumz(locals) + sumz(code) + 1), // body_size\n      localCount, ...locals, ...code, end\n    ]) as any as FunctionBody\n  },\n\n  local_entry: (count :VarUint32, type :ValueType) =>\n    new cell<N>(T.local_entry, [count, type]) as any as LocalEntry,\n\n  // Semantics of the WebAssembly stack machine:\n  // - Control instructions pop their argument value(s) off the stack, may change\n  //   the program counter, and push result value(s) onto the stack.\n  // - Simple instructions pop their argument value(s) from the stack, apply an\n  //   operator to the values, and then push the result value(s) onto the stack,\n  //   followed by an implicit advancement of the program counter.\n\n  unreachable: new instr_atom(0x00, Void) as any as Op<Void>,\n  nop:         new instr_atom(0x01, Void) as any as Op<Void>,\n\n  // begin a block which can also form CF loops\n  block<R extends AnyResult>(r :R, body :AnyOp[]) {\n    assert(r === body[body.length-1].r)\n    return new instr_imm1_post(0x02, r, r as N, [...body, end]) as any as Op<R>\n  },\n\n  void_block(body :AnyOp[]) {\n    assert(body.length == 0 || Void === body[body.length-1].r)\n    return new instr_imm1_post(0x02, Void, EmptyBlock, [...body, end]) as any as Op<Void>\n  },\n\n\n  // begin a block which can also form CF loops\n  loop<R extends AnyResult>(r :R, body :AnyOp[]) {\n    assert(r === body[body.length-1].r)\n    return new instr_imm1_post(0x03, r, r as N, [...body, end]) as any as Op<R>\n  },\n\n  void_loop(body :AnyOp[]) {\n    assert(body.length == 0 || Void === body[body.length-1].r)\n    return new instr_imm1_post(0x03, Void, EmptyBlock, [...body, end]) as any as Op<Void>\n  },\n\n  if: if_, if_,\n  end: end,\n\n  // Branch to a given label (relative depth) in an enclosing construct.\n  // Note:\n  // - \"branching\" to a block correspond to a \"break\" statement\n  // - \"branching\" to a loop correspond to a \"continue\" statement\n  br: (relDepth :uint32) =>\n    new instr_imm1(0x0c, Void, varuint32(relDepth)) as any as Op<Void>,\n\n  // Conditionall branch to a given label in an enclosing construct.\n  // When condition is false, this is equivalent to a \"Nop\" operation.\n  // When condition is true, this is equivalent to a \"Br\" operation.\n  br_if: (relDepth :uint32, cond :Op<I32>) =>\n    new instr_pre_imm(0x0d, Void, [cond], [varuint32(relDepth)]) as any as Op<Void>,\n\n  // Jump table which jumps to a label in an enclosing construct.\n  // A br_table consists of a zero-based array of labels, a default label,\n  // and an index operand. A br_table jumps to the label indexed in the\n  // array or the default label if the index is out of bounds.\n  br_table: (targetLabels :VarUint32[], defaultLabel :VarUint32, index :AnyOp) =>\n    new instr_pre_imm(0x0e, Void,\n      [index],\n      [varuint32(targetLabels.length), ...targetLabels, defaultLabel]\n    ) as any as Op<Void>,\n\n  // return zero or one value from this function\n  return: return_, return_,\n  return_void: new instr_atom(0x0f, Void) as Op<Void>,\n\n  // Calling\n  call<R extends Result>(r :R, funcIndex: VarUint32, args :AnyOp[]) {\n    return new instr_pre_imm(0x10, r, args, [funcIndex]) as any as Op<R>\n  },\n\n  call_indirect<R extends Result>(r :R, funcIndex: VarUint32, args :AnyOp[]) {\n    return new instr_pre_imm(0x11, r, args, [funcIndex, varuint1_0]) as any as Op<R>\n  },\n\n  // drop discards the value of its operand\n  // R should be the value on the stack \"under\" the operand. E.g. with a stack:\n  //   I32  top\n  //   F64  ...\n  //   F32  bottom\n  // drop\n  //   F64  top\n  //   F32  bottom\n  // i.e. R=F64\n  drop<R extends AnyResult>(r :R, n :Op<Result>) {\n    return new instr_pre1(0x1a, r, n) as any as Op<R>\n  },\n\n  // select one of two values based on condition\n  select<R extends Result>(cond :Op<I32>, trueRes :Op<R>, falseRes :Op<R>) {\n    assert(trueRes.r === falseRes.r)\n    return new instr_pre(0x1b, trueRes.r, [trueRes, falseRes, cond]) as any as Op<R>\n  },\n\n  // Variable access\n  get_local<R extends Result>(r :R, localIndex :uint32) {\n    return new instr_imm1(0x20, r, varuint32(localIndex)) as any as Op<R>\n  },\n\n  set_local(localIndex :uint32, expr :Op<Result>) {\n    return new instr_pre_imm(0x21, Void, [expr], [varuint32(localIndex)]) as any as Op<Void>\n  },\n\n  tee_local<R extends Result>(localIndex :uint32, expr :Op<R>) {\n    return new instr_pre_imm(0x22, expr.r, [expr], [varuint32(localIndex)]) as any as Op<R>\n  },\n\n  get_global<R extends Result>(r :R, globalIndex :uint32) {\n    return new instr_imm1(0x23, r, varuint32(globalIndex)) as any as Op<R>\n  },\n\n  set_global(globalIndex :uint32, expr :Op<Result>) {\n    return new instr_pre_imm(0x24, Void, [expr], [varuint32(globalIndex)]) as any as Op<Void>\n  },\n\n  // Memory\n  current_memory() { // query the size of memory (number of pages)\n    return new instr_imm1(0x3f, c.i32, varuint1_0) as any as Op<Int>\n  },\n\n  // Grow the size of memory by `delta` memory pages.\n  // Returns the previous memory size in units of pages or -1 on failure.\n  grow_memory(delta :Op<Int>) {\n    assert(delta.v >= 0)\n    return new instr_pre_imm(0x40, c.i32, [delta], [varuint1_0]) as any as Op<Int>\n  },\n\n  // MemImm: Alignment          Offset\n  align8:  [ varUint32Cache[0], varUint32Cache[0] ] as [VarUint32,Int],\n  align16: [ varUint32Cache[1], varUint32Cache[0] ] as [VarUint32,Int],\n  align32: [ varUint32Cache[2], varUint32Cache[0] ] as [VarUint32,Int],\n  align64: [ varUint32Cache[3], varUint32Cache[0] ] as [VarUint32,Int],\n\n  i32: new i32ops(-0x01, 0x7f) as I32ops,\n  i64: new i64ops(-0x02, 0x7e) as I64ops,\n  f32: new f32ops(-0x03, 0x7d) as F32ops,\n  f64: new f64ops(-0x04, 0x7c) as F64ops,\n}\n\n\nexport interface FunctionBodyInfo {\n  index  :number // module function index\n  locals :N[]\n  code   :AnyOp[]\n}\n\n// access helpers\nexport const get = {\n  sections(m :Module) :Section[] {\n    return m.v.slice(2) // 0=magic, 1=version, 2...=Section[]\n  },\n\n  section(m :Module, id :VarUint7|uint7) :Section {\n    let ido = (typeof id != 'object') ? varuint7(id as uint7) : (id as VarUint7)\n    for (let i = 2; i < m.v.length; ++i) {\n      let section = m.v[i]\n      if (section.v[0] === ido) {\n        return section\n      }\n    }\n  },\n\n  function_bodies(s :CodeSection) :Iterable<FunctionBodyInfo> {\n    return {\n      [Symbol.iterator](startIndex? :number) {\n        let index = 3 + (startIndex || 0)\n        return {\n          next() {\n            const funcBody = s.v[index]\n            if (!funcBody) {\n              return {done: true, value: null}\n            }\n            let localCount = funcBody.v[1]\n            return {\n              done: false,\n              value: {\n                index: index++,\n                locals: funcBody.v.slice(2, localCount.v + 2),\n                code: funcBody.v.slice(2 + localCount.v, funcBody.v.length - 1) as AnyOp[]\n                  //  -1 to skip terminating `end`\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n\n}","// UTF-8 encoding/decoding\nexport interface UTF8 {\n  encode(text :string) :Uint8Array\n  decode(buf: ArrayBufferView | ArrayLike<number>) :string\n}\n\ndeclare interface TextEncoder {\n  new(encoding :string)\n  encode(v :string, options? :{stream :boolean}) :Uint8Array\n}\ndeclare var TextEncoder: TextEncoder\n\ndeclare interface TextDecoder {\n  new(encoding :string)\n  decode(v :ArrayBufferView, options? :{stream :boolean}) :string\n}\ndeclare var TextDecoder: TextDecoder\n\ndeclare interface Buffer {\n  buffer :ArrayBuffer\n  byteLength :number\n  from(a :ArrayLike<number>) :Buffer\n  from(a :ArrayBuffer, byteOffset? :number, byteLength? :number) :Buffer\n  from(s :string, encoding? :string) :Buffer\n  slice(begin :number, end? :number) :ArrayBuffer\n  toString(encoding? :string) :string\n  [Symbol.toStringTag]: \"ArrayBuffer\"\n}\ndeclare var Buffer: Buffer\n\n// ——————————————————————————————————————————————————————————————————————————\n\nexport const utf8 = typeof TextEncoder != 'undefined' ? (function(){\n  // Modern browsers\n  const enc = new TextEncoder('utf-8')\n  const dec = new TextDecoder('utf-8')\n  return {\n\n  encode(text :string) :Uint8Array {\n    return enc.encode(text)\n  },\n\n  decode(b: ArrayBufferView|ArrayLike<number>) :string {\n    return dec.decode(\n      (b as ArrayBufferView).buffer != undefined ? b as ArrayBufferView :\n      new Uint8Array(b as ArrayLike<number>)\n    )\n  },\n\n}})() : typeof Buffer != 'undefined' ? {\n  // Nodejs\n  encode(text :string) :Uint8Array {\n    return new Uint8Array(Buffer.from(text, 'utf-8'))\n  },\n\n  decode(b: ArrayBufferView|ArrayLike<number>) :string {\n    return (\n      (b as ArrayBufferView).buffer != undefined ?\n        Buffer.from(\n          (b as ArrayBufferView).buffer,\n          (b as ArrayBufferView).byteOffset,\n          (b as ArrayBufferView).byteLength) :\n        Buffer.from(b as ArrayLike<number>)\n    ).toString('utf8')\n  }\n\n} : {\n  // Some other pesky JS environment\n  encode(text :string) :Uint8Array {\n    let asciiBytes = []\n    for (let i = 0, L = text.length; i != L; ++i) {\n      asciiBytes[i] = 0xff & text.charCodeAt(i);\n    }\n    return new Uint8Array(asciiBytes)\n  },\n  decode(buf: ArrayBufferView) :string {\n    return ''\n  }\n} as UTF8\n","import {uint8, uint16, uint32, float32, float64} from './basic-types'\n\nexport interface Emitter {\n  // Emits code\n  //\n  // Each modifying operation returns a potentially new Emitter which is the result of\n  // the receiver + modifications, thus modifying operations should be called like this:\n  //   e = e.writeU32(1)\n  //   e = e.writeU32(2)\n  // but NOT like this:\n  //   e.writeU32(1)\n  //   e.writeU32(2)\n  //   // e represents same state as before `e.writeU32(1)`\n  //\n  // Think of Emitter as being persistent immutable state\n  //\n  writeU8(v :uint8) :Emitter\n  writeU16(v :uint16) :Emitter\n  writeU32(v :uint32) :Emitter\n  writeF32(v :float32) :Emitter\n  writeF64(v :float64) :Emitter\n  writeBytes(v :ArrayLike<uint8>) :Emitter\n}\n\nexport interface Emittable {\n  emit(ctx :Emitter) :Emitter\n}\n\n// Emitter that writes to an ArrayBuffer\nexport class BufferedEmitter implements Emitter {\n  readonly buffer :ArrayBuffer\n  readonly view   :DataView\n           length :uint32\n\n  constructor(buffer :ArrayBuffer) {\n    this.buffer = buffer\n    this.view   = new DataView(this.buffer)\n    this.length = 0\n  }\n\n  writeU8(v :uint8) :Emitter {\n    this.view.setUint8(this.length++, v)\n    return this\n  }\n\n  writeU16(v :uint16) :Emitter {\n    this.view.setUint16(this.length, v, true)\n    this.length += 2\n    return this\n  }\n\n  writeU32(v :uint32) :Emitter {\n    this.view.setUint32(this.length, v, true)\n    this.length += 4\n    return this\n  }\n\n  writeF32(v :float32) :Emitter {\n    this.view.setFloat32(this.length, v, true)\n    this.length += 4\n    return this\n  }\n\n  writeF64(v :float64) :Emitter {\n    this.view.setFloat64(this.length, v, true)\n    this.length += 8\n    return this\n  }\n\n  writeBytes(bytes :ArrayLike<uint8>) {\n    for (let i = 0, L = bytes.length; i != L; ++i) {\n      this.view.setUint8(this.length++, bytes[i])\n    }\n    return this\n  }\n}\n\n// Note: you can use repr.reprBuffer(ArrayBuffer, Writer)\n// to print an ASCII representation of a buffer.\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\ndeclare const monaco: any\n\nexport const name = '10'\n\nexport const state = {\n  fnString: '',\n  result: '',\n}\n\nexport type S = typeof state\n\nlet monacoLoaded = false\nlet codeEditor\n\nexport const inputs: Inputs<S> = ({ stateOf, toAct }) => ({\n  init: () => {\n    let loadEditor = () => {\n      monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({\n        noSemanticValidation: true,\n        noSyntaxValidation: false,\n      })\n      codeEditor = monaco.editor.create(document.getElementById('codeEditor'), {\n        value: exampleCode,\n        language: 'javascript'\n      })\n      monacoLoaded = true\n    }\n    if ((window as any).monacoLoaded) {\n      loadEditor()\n    } else {\n      ;(window as any).onMonacoLoaded = loadEditor\n    }\n  },\n})\n\nexport const actions: Actions<S> = {}\n\nconst view: View<S> = ({ ctx, ev, act }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'Si! esto ya está disponible en la Web'),\n    h('div', {class: { [style.container]: true }}, [\n      h('div', {class: { [style.text]: true }}, [\n        <any> 'Funciones asíncronas, arrow functions, let, const, template strings, rest / spread, destructuring, etc … ',\n        h('a', {attrs: {\n          href: 'https://kangax.github.io/compat-table/es6/',\n          target: '_blank',\n          rel: 'noopener noreferrer',\n        }}, 'ES Table'),\n      ]),\n      h('div', {\n        class: { [style.codeEditor]: true },\n        attrs: { id: 'codeEditor' },\n      }),\n    ]),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '10px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.primary,\n  },\n  container: {\n    margin: '10px',\n    width: '100%',\n    height: 'calc(100% - 120px)',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    fontSize: '24px',\n  },\n  text: {\n    marginBottom: '15px',\n    padding: '10px 40px',\n  },\n  codeEditor: {\n    width: 'calc(100% - 20px)',\n    height: '340px',\n  },\n}\n\nexport const groups = { style }\n\nconst exampleCode = `async function aPages () {\n  let posts = await fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.text())\n  let users = await fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.text())\n  return (posts + users).split('a').length - 1\n}\naPages().then(n => console.log(\\`Hay \\${n} A's\\`))\n`\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '11'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ({ stateOf, toAct }) => ({\n})\n\nexport const actions: Actions<S> = {}\n\nconst view: View<S> = ({ ctx, ev, act }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'CSS Grid'),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '10px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.tertiary,\n  },\n}\n\nexport const groups = { style }\n","import {\n  Actions,\n  Inputs,\n  Interfaces,\n  StyleGroup,\n} from 'fractal-core'\nimport { View, h } from 'fractal-core/interfaces/view'\nimport { palette } from '../constants'\n\nexport const name = '12'\n\nexport const state = {}\n\nexport type S = typeof state\n\nexport const inputs: Inputs<S> = ctx => ({\n})\n\nexport const actions: Actions<S> = {\n}\n\nconst view: View<S> = ({ ctx }) => s => {\n  let style = ctx.groups.style\n\n  return h('div', {\n    key: ctx.name,\n    class: { [style.base]: true },\n  }, [\n    h('div', {class: { [style.titlePrimary]: true }}, 'Gracias!'),\n    h('div', {class: { [style.titleSecondary]: true }}, [\n      <any> 'Me encuentran como ',\n      h('a', {attrs: {\n        href: 'https://github.com/carloslfu',\n        target: '_blank',\n        rel: 'noopener noreferer',\n      }}, '@carloslfu'),\n      <any>' en Github',\n    ]),\n    h('div', {class: { [style.titleSecondary]: true }}, 'Recursos:'),\n    ...[\n      ['Native apps are doomed - Eiric Elliot', 'https://medium.com/javascript-scene/native-apps-are-doomed-ac397148a2c0'],\n      ['Offline Cookbook - Jake Archibald', 'https://jakearchibald.com/2014/offline-cookbook'],\n      ['Emscripten', 'https://kripken.github.io/mloc_emscripten_talk'],\n      ['ESNext Table', 'https://kangax.github.io/compat-table/es6/'],\n    ].map(el => h('a', {attrs: {\n      href: el[1],\n      target: '_blank',\n      rel: 'noopener noreferer',\n    }}, el[0])),\n  ])\n}\n\nexport const interfaces: Interfaces = { view }\n\nconst style: StyleGroup = {\n  base: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  titlePrimary: {\n    padding: '0 20px',\n    marginBottom: '50px',\n    fontSize: '70px',\n    textAlign: 'center',\n    color: palette.tertiary,\n  },\n  titleSecondary: {\n    margin: '10px',\n    fontSize: '34px',\n    textAlign: 'center',\n  },\n}\n\nexport const groups = { style }\n\n","import {\n  mergeStates,\n} from 'fractal-core'\n\ndeclare const FuseBox\n\nif (!process.env.isProduction) {\n\n  const customizedHMRPlugin = {\n    hmrUpdate: data => {\n      if (data.type === 'js') {\n          FuseBox.flush()\n          FuseBox.dynamic(data.path, data.content)\n          if (FuseBox.mainFile && data.path.slice(0, 4) === 'Root') {\n            let Root = FuseBox.import('./Root')\n            ;(window as any).app.moduleAPI.reattach(Root, mergeStates)\n          } else if (FuseBox.mainFile) {\n            ;(window as any).app.moduleAPI.dispose()\n            FuseBox.import(FuseBox.mainFile)\n          }\n          return true\n      }\n    }\n  }\n\n  if (!process.env.hmrRegistered) {\n    process.env.hmrRegistered = <any> false\n    FuseBox.addPlugin(customizedHMRPlugin)\n  }\n\n}\n\n"]}